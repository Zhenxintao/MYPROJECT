server:
  port: 3379
spring:
  application:
    name: dataclean-server-one
    id: 5872935
micro:
  server:
    host: 10.0.2.71
    port: 7611
    name: dataclean_1
    tokens: 10000
  pool:
    maxTotal: 30  #池中的最大连接数
    minIdle: 0    #最少的空闲连接数
    maxIdle: 50    #最多的空闲连接数
    maxWaitMillis: 1    #当连接池资源耗尽时,调用者最大阻塞的时间,超时时抛出异常 单位:毫秒数
    lifo: true    #连接池存放池化对象方式,true放在空闲队列最前面,false放在空闲队列最后
    blockWhenExhausted: true  #连接耗尽时是否阻塞,默认为true
grpc:
  server:
    host: 10.0.2.71
    port: 7611


topics:
  dataIssue:
    topicName: data-cleaning-issue #需要消费的kafka的主题名称  # 下发任务的队列
    group_id: data-issue #消费组名称
    policy: 1  #消费策略 0：单线程，单消费；1：多线程,单组消费多分区(一个group消费所有分区) 2：多线程,多组消费多分区(一个group消费一个分区,多个group消费所有分区)
    application_num: 3 #服务实例数 应该小于服务实际实例数、节点数

  dataProduce:
    topicName: data-cleaning-produce #需要消费的kafka的主题名称   # 生产的队列
    group_id: data-produce #消费组名称
    policy: 1  #消费策略 0：单线程，单消费；1：多线程,单组消费多分区(一个group消费所有分区) 2：多线程,多组消费多分区(一个group消费一个分区,多个group消费所有分区)
    application_num: 3 #服务实例数 应该小于服务实际实例数、节点数

  dataCenter:
    topicName: produce_send_command #需要消费的kafka的主题名称   # 生产的队列
    group_id: data-center #消费组名称
    policy: 1  #消费策略 0：单线程，单消费；1：多线程,单组消费多分区(一个group消费所有分区) 2：多线程,多组消费多分区(一个group消费一个分区,多个group消费所有分区)
    application_num: 3 #服务实例数 应该小于服务实际实例数、节点数